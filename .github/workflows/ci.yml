name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20.x'
  DOCKER_BUILDKIT: 1

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: todoapp
          POSTGRES_PASSWORD: todoapp_password
          POSTGRES_DB: todoapp_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./src

      - name: Build
        run: dotnet build --no-restore --configuration Release
        working-directory: ./src

      - name: Test
        run: dotnet test --no-build --configuration Release --verbosity normal --logger:"console;verbosity=detailed" --collect:"XPlat Code Coverage"
        working-directory: ./src
        env:
          ConnectionStrings__DefaultConnection: Host=localhost;Database=todoapp_test_db;Username=todoapp;Password=todoapp_password

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          directory: ./src
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./src/TodoApp.Web/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ./src/TodoApp.Web

      - name: Lint
        run: npm run lint
        working-directory: ./src/TodoApp.Web

      - name: Type check
        run: npm run type-check
        working-directory: ./src/TodoApp.Web

      - name: Test
        run: npm run test:ci
        working-directory: ./src/TodoApp.Web

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          directory: ./src/TodoApp.Web/coverage
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/TodoApp.Api/Dockerfile
          push: false
          tags: todoapp-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/TodoApp.Web/Dockerfile
          push: false
          tags: todoapp-web:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start Docker Compose stack
        run: |
          docker compose --profile production build
          docker compose --profile production up -d
          ./scripts/wait-for-healthy.sh postgres 30
        
      - name: Run API health check
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:5050/health; then
              echo "API is healthy"
              break
            fi
            echo "Waiting for API to be ready... (attempt $i)"
            sleep 2
          done

      - name: Run integration tests
        run: |
          # Add integration tests here when available
          echo "Integration tests placeholder"

      - name: Stop Docker Compose
        if: always()
        run: docker compose down -v

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner for API
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './src/TodoApp.Api'
          format: 'sarif'
          output: 'trivy-api-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy vulnerability scanner for Web
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './src/TodoApp.Web'
          format: 'sarif'
          output: 'trivy-web-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: '.'